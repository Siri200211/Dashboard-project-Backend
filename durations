const getCategorizedCounts = async (filters = {}) => {
  const {
    year,
    month,
    day,
    order_line_rto_area,
    deleted_method,
    dgm,
    gm,
    duration,
  } = filters;

  const mapping = {
    "RTO - AD": { DGM: "NP", GM: "REGION 3" },
    "RTO - AG": { DGM: "WPS", GM: "REGION 2" },
    "RTO - AP": { DGM: "EP", GM: "REGION 3" },
    "RTO - BC": { DGM: "EP", GM: "REGION 3" },
  };

  const durationFilters = {
    "below 1 year": { $lt: ["$durationInYears", 1] },
    "1 year to 2 years": { $and: [{ $gte: ["$durationInYears", 1] }, { $lt: ["$durationInYears", 2] }] },
    "2 years to 3 years": { $and: [{ $gte: ["$durationInYears", 2] }, { $lt: ["$durationInYears", 3] }] },
    "3 years to 4 years": { $and: [{ $gte: ["$durationInYears", 3] }, { $lt: ["$durationInYears", 4] }] },
    "4 years to 5 years": { $and: [{ $gte: ["$durationInYears", 4] }, { $lt: ["$durationInYears", 5] }] },
    "more than 5 years": { $gte: ["$durationInYears", 5] },
  };

  const matchStage = { $and: [] };

  if (order_line_rto_area) {
    matchStage.$and.push({ order_line_rto_area });
  }
  if (deleted_method) {
    if (deleted_method === "Customer Requested") {
      matchStage.$and.push({
        $or: [
          { deleted_method: "Customer Requested" },
          { deleted_method: "Promotion Upgrade" },
          { deleted_method: "Promotion Downgrade" },
        ],
      });
    } else {
      matchStage.$and.push({ deleted_method });
    }
  }
  if (dgm || gm) {
    matchStage.$and.push({
      $or: [dgm ? { DGM: dgm } : {}, gm ? { GM: gm } : {}],
    });
  }

  const results = await Disconnection.aggregate([
    { $match: matchStage.$and.length > 0 ? matchStage : {} },

    {
      $addFields: {
        DGM: {
          $let: {
            vars: {
              map: {
                $arrayElemAt: [
                  {
                    $filter: {
                      input: { $objectToArray: mapping },
                      as: "m",
                      cond: { $eq: ["$order_line_rto_area", "$$m.k"] },
                    },
                  },
                  0,
                ],
              },
            },
            in: "$$map.v.DGM",
          },
        },
        GM: {
          $let: {
            vars: {
              map: {
                $arrayElemAt: [
                  {
                    $filter: {
                      input: { $objectToArray: mapping },
                      as: "m",
                      cond: { $eq: ["$order_line_rto_area", "$$m.k"] },
                    },
                  },
                  0,
                ],
              },
            },
            in: "$$map.v.GM",
          },
        },
      },
    },

    {
      $match: {
        ...(dgm ? { DGM: dgm } : {}),
        ...(gm ? { GM: gm } : {}),
      },
    },

    {
      $addFields: {
        durationInYears: {
          $divide: [{ $subtract: ["$churn_date", "$activated_date"] }, 1000 * 60 * 60 * 24 * 365],
        },
      },
    },

    ...(duration
      ? [
          {
            $match: {
              $expr: durationFilters[duration],
            },
          },
        ]
      : []),

    {
      $group: {
        _id: "$account_num",
        records: { $push: "$$ROOT" },
      },
    },

    {
      $addFields: {
        hasCopperDisconnection: {
          $anyElementTrue: {
            $map: {
              input: "$records",
              as: "record",
              in: { $eq: ["$$record.order_line_oss_service_type", "AB-CAB"] },
            },
          },
        },
        hasFiberDisconnection: {
          $anyElementTrue: {
            $map: {
              input: "$records",
              as: "record",
              in: { $eq: ["$$record.order_line_oss_service_type", "AB-FTTH"] },
            },
          },
        },
        eIptvRecords: {
          $filter: {
            input: "$records",
            as: "record",
            cond: {
              $regexMatch: {
                input: "$$record.order_line_oss_service_type",
                regex: /^E-IPTV/,
                options: "i",
              },
            },
          },
        },
      },
    },

    {
      $addFields: {
        categorizedCopper: {
          $cond: [
            { $and: ["$hasCopperDisconnection", { $gt: [{ $size: "$eIptvRecords" }, 0] }] },
            { $size: "$eIptvRecords" },
            0,
          ],
        },
        categorizedFiber: {
          $cond: [
            { $and: ["$hasFiberDisconnection", { $gt: [{ $size: "$eIptvRecords" }, 0] }] },
            { $size: "$eIptvRecords" },
            0,
          ],
        },
        categorizedOnlyPeotv: {
          $cond: [
            { $and: [{ $not: "$hasCopperDisconnection" }, { $not: "$hasFiberDisconnection" }] },
            { $size: "$eIptvRecords" },
            0,
          ],
        },
      },
    },

    {
      $group: {
        _id: null,
        total_peotv_with_copper: { $sum: "$categorizedCopper" },
        total_peotv_with_fiber: { $sum: "$categorizedFiber" },
        total_only_peotv: { $sum: "$categorizedOnlyPeotv" },
      },
    },

    {
      $project: {
        total_peotv_with_copper: 1,
        total_peotv_with_fiber: 1,
        total_only_peotv: 1,
        total: {
          $add: ["$total_peotv_with_copper", "$total_peotv_with_fiber", "$total_only_peotv"],
        },
      },
    },
  ]);

  return results[0] || {};
};

app.get("/disconnection-counts", async (req, res) => {
  try {
    const {
      year,
      month,
      day,
      order_line_rto_area,
      deleted_method,
      dgm,
      gm,
      duration,
    } = req.query;

    const filters = { year, month, day, order_line_rto_area, deleted_method, dgm, gm, duration };

    const counts = await getCategorizedCounts(filters);
    res.status(200).json(counts);
  } catch (error) {
    console.error("Error fetching categorized counts:", error.message);
    res.status(500).send("Error fetching disconnection counts.");
  }
});